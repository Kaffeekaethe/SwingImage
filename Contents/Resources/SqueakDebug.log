MessageNotUnderstood: UndefinedObject>>equals:27 October 2016 8:42:08.438027 amVM: Win32 - SmalltalkImage: Squeak5.1 [latest update: #16549]SecurityManager state:Restricted: falseFileAccess: trueSocketAccess: trueWorking Dir D:\Dokumente\swingimage\Contents\ResourcesTrusted Dir D:\Dokumente\swingimage\Contents\Resources\KathaUntrusted Dir D:\Dokumente\My SqueakUndefinedObject(Object)>>doesNotUnderstand: #equals:	Receiver: nil	Arguments and temporary variables: 		aMessage: 	equals: 'left'		exception: 	MessageNotUnderstood: UndefinedObject>>equals:		resumeValue: 	nil	Receiver's instance variables: nilSwingScalePan>>initialize	Receiver: a SwingScalePan(2897931)	Arguments and temporary variables: 	Receiver's instance variables: 		bounds: 	0@0 corner: 40@10		owner: 	nil		submorphs: 	#()		fullBounds: 	nil		color: 	Color white		extension: 	a MorphExtension (2233527) [other:  (signalConnections -> a Dictiona...etc...		borderWidth: 	0		borderColor: 	Color black		scale: 	nil		weight: 	nil		height: 	nil		side: 	nilSwingScalePan class(Behavior)>>new	Receiver: SwingScalePan	Arguments and temporary variables: 	Receiver's instance variables: 		superclass: 	RectangleMorph		methodDict: 	a MethodDictionary(#initialize->(SwingScalePan>>#initialize "a CompiledMethod...etc...		format: 	65548		instanceVariables: 	#('scale' 'weight' 'height' 'side')		organization: 	('as yet unclassified' initialize scale scale: side side:)		subclasses: 	nil		name: 	#SwingScalePan		classPool: 	nil		sharedPools: 	nil		environment: 	Smalltalk		category: 	#SwingGameSwingScalePan class>>on:as:	Receiver: SwingScalePan	Arguments and temporary variables: 		aScale: 	a SwingScale(1452237)		aString: 	'right'	Receiver's instance variables: 		superclass: 	RectangleMorph		methodDict: 	a MethodDictionary(#initialize->(SwingScalePan>>#initialize "a CompiledMethod...etc...		format: 	65548		instanceVariables: 	#('scale' 'weight' 'height' 'side')		organization: 	('as yet unclassified' initialize scale scale: side side:)		subclasses: 	nil		name: 	#SwingScalePan		classPool: 	nil		sharedPools: 	nil		environment: 	Smalltalk		category: 	#SwingGameSwingScale>>initialize	Receiver: a SwingScale(1452237)	Arguments and temporary variables: 	Receiver's instance variables: 		bounds: 	0@0 corner: 100@20		owner: 	nil		submorphs: 	#()		fullBounds: 	nil		color: 	Color green		extension: 	a MorphExtension (2063405) [other:  (signalConnections -> a Dictiona...etc...		borderWidth: 	2		borderColor: 	Color black		leftSide: 	nil		rightSide: 	nil		game: 	nilSwingScale class(Behavior)>>new	Receiver: SwingScale	Arguments and temporary variables: 	Receiver's instance variables: 		superclass: 	RectangleMorph		methodDict: 	a MethodDictionary(#game->(SwingScale>>#game "a CompiledMethod(2612...etc...		format: 	65547		instanceVariables: 	#('leftSide' 'rightSide' 'game')		organization: 	('as yet unclassified' game game: increaseScale initialize leftSide...etc...		subclasses: 	nil		name: 	#SwingScale		classPool: 	nil		sharedPools: 	nil		environment: 	Smalltalk		category: 	#SwingGameSwingScale class>>on:at:	Receiver: SwingScale	Arguments and temporary variables: 		aGame: 	a SwingField(326963)		aPosition: 	0@570	Receiver's instance variables: 		superclass: 	RectangleMorph		methodDict: 	a MethodDictionary(#game->(SwingScale>>#game "a CompiledMethod(2612...etc...		format: 	65547		instanceVariables: 	#('leftSide' 'rightSide' 'game')		organization: 	('as yet unclassified' game game: increaseScale initialize leftSide...etc...		subclasses: 	nil		name: 	#SwingScale		classPool: 	nil		sharedPools: 	nil		environment: 	Smalltalk		category: 	#SwingGameSwingField>>initialize	Receiver: a SwingField(326963)	Arguments and temporary variables: 		scale: 	nil		x: 	1	Receiver's instance variables: 		bounds: 	0@0 corner: 940@600		owner: 	nil		submorphs: 	{a SwingBall(147741)}		fullBounds: 	nil		color: 	Color black		extension: 	a MorphExtension (61321) [other:  (signalConnections -> a Dictionary...etc...		borderWidth: 	2		borderColor: 	Color black		ball: 	a SwingBall(147741)		scales: 	#(nil nil nil nil nil nil nil nil)		playerKeys: 	nilSwingField class(Behavior)>>new	Receiver: SwingField	Arguments and temporary variables: 	Receiver's instance variables: 		superclass: 	RectangleMorph		methodDict: 	a MethodDictionary(#ball->(SwingField>>#ball "a CompiledMethod(2847...etc...		format: 	65547		instanceVariables: 	#('ball' 'scales' 'playerKeys')		organization: 	('as yet unclassified' ball ball: checkCollisionWithScales checkCollisionWithTopAndBottomBorder...etc...		subclasses: 	nil		name: 	#SwingField		classPool: 	nil		sharedPools: 	nil		environment: 	Smalltalk		category: 	#SwingGameUndefinedObject>>DoIt	Receiver: nil	Arguments and temporary variables: 	Receiver's instance variables: nilCompiler>>evaluateCue:ifFail:	Receiver: a Compiler	Arguments and temporary variables: 		aCue: 	a CompilationCue		failBlock: 	[closure] in Compiler>>evaluateCue:ifFail:logged:		methodNode: 	DoIt	^ SwingField new openInWorld		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(3305167)")		value: 	nil	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCueCompiler>>evaluateCue:ifFail:logged:	Receiver: a Compiler	Arguments and temporary variables: 		aCue: 	a CompilationCue		failBlock: 	[closure] in [] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:...etc...		logFlag: 	true		value: 	nil	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCueCompiler>>evaluate:in:to:notifying:ifFail:logged:	Receiver: a Compiler	Arguments and temporary variables: 		textOrStream: 	a ReadStream		aContext: 	nil		receiver: 	nil		aRequestor: 	a SmalltalkEditor		failBlock: 	[closure] in [] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:...etc...		logFlag: 	true		theClass: 	UndefinedObject	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCue[] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:	Receiver: a SmalltalkEditor	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		morph: 	a TextMorphForEditView(2916554)		selectionShowing: 	false		model: 	a Workspace		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character $S and rectangle 3@0 cor...etc...		pointBlock: 	a CharacterBlock with index 30 and rectangle 3@32 corner: 3@48 in ...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextFontChange font: 1}		lastParenLocation: 	nil		otherInterval: 	(1 to: 0)		oldInterval: 	(1 to: 29)		typeAhead: 	a WriteStream		history: 	a TextEditorCommandHistory		styler: 	nilBlockClosure>>on:do:	Receiver: [closure] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:	Arguments and temporary variables: 		exceptionOrExceptionSet: 	OutOfScopeNotification		handlerAction: 	[closure] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:...etc...		handlerActive: 	true	Receiver's instance variables: 		outerContext: 	SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:		startpc: 	133		numArgs: 	0SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:	Receiver: a SmalltalkEditor	Arguments and temporary variables: 		aBlock: 	[closure] in SmalltalkEditor(TextEditor)>>evaluateSelection		result: 	nil		rcvr: 	nil		ctxt: 	nil	Receiver's instance variables: 		morph: 	a TextMorphForEditView(2916554)		selectionShowing: 	false		model: 	a Workspace		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character $S and rectangle 3@0 cor...etc...		pointBlock: 	a CharacterBlock with index 30 and rectangle 3@32 corner: 3@48 in ...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextFontChange font: 1}		lastParenLocation: 	nil		otherInterval: 	(1 to: 0)		oldInterval: 	(1 to: 29)		typeAhead: 	a WriteStream		history: 	a TextEditorCommandHistory		styler: 	nilSmalltalkEditor(TextEditor)>>evaluateSelection	Receiver: a SmalltalkEditor	Arguments and temporary variables: 	Receiver's instance variables: 		morph: 	a TextMorphForEditView(2916554)		selectionShowing: 	false		model: 	a Workspace		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character $S and rectangle 3@0 cor...etc...		pointBlock: 	a CharacterBlock with index 30 and rectangle 3@32 corner: 3@48 in ...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextFontChange font: 1}		lastParenLocation: 	nil		otherInterval: 	(1 to: 0)		oldInterval: 	(1 to: 29)		typeAhead: 	a WriteStream		history: 	a TextEditorCommandHistory		styler: 	nilSmalltalkEditor(TextEditor)>>doIt	Receiver: a SmalltalkEditor	Arguments and temporary variables: 	Receiver's instance variables: 		morph: 	a TextMorphForEditView(2916554)		selectionShowing: 	false		model: 	a Workspace		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character $S and rectangle 3@0 cor...etc...		pointBlock: 	a CharacterBlock with index 30 and rectangle 3@32 corner: 3@48 in ...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextFontChange font: 1}		lastParenLocation: 	nil		otherInterval: 	(1 to: 0)		oldInterval: 	(1 to: 29)		typeAhead: 	a WriteStream		history: 	a TextEditorCommandHistory		styler: 	nilSmalltalkEditor(TextEditor)>>doIt:	Receiver: a SmalltalkEditor	Arguments and temporary variables: 		aKeyboardEvent: 	[147@107 keystroke '<Cmd-d>' (100) 446576228]	Receiver's instance variables: 		morph: 	a TextMorphForEditView(2916554)		selectionShowing: 	false		model: 	a Workspace		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character $S and rectangle 3@0 cor...etc...		pointBlock: 	a CharacterBlock with index 30 and rectangle 3@32 corner: 3@48 in ...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextFontChange font: 1}		lastParenLocation: 	nil		otherInterval: 	(1 to: 0)		oldInterval: 	(1 to: 29)		typeAhead: 	a WriteStream		history: 	a TextEditorCommandHistory		styler: 	nil--- The full stack ---UndefinedObject(Object)>>doesNotUnderstand: #equals:SwingScalePan>>initializeSwingScalePan class(Behavior)>>newSwingScalePan class>>on:as:SwingScale>>initializeSwingScale class(Behavior)>>newSwingScale class>>on:at:SwingField>>initializeSwingField class(Behavior)>>newUndefinedObject>>DoItCompiler>>evaluateCue:ifFail:Compiler>>evaluateCue:ifFail:logged:Compiler>>evaluate:in:to:notifying:ifFail:logged:[] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:BlockClosure>>on:do:SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:SmalltalkEditor(TextEditor)>>evaluateSelectionSmalltalkEditor(TextEditor)>>doItSmalltalkEditor(TextEditor)>>doIt: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -SmalltalkEditor(TextEditor)>>dispatchOnKeyboardEvent:SmalltalkEditor(TextEditor)>>keyStroke:[] in [] in TextMorphForEditView(TextMorph)>>keyStroke:TextMorphForEditView(TextMorph)>>handleInteraction:fromEvent:TextMorphForEditView>>handleInteraction:fromEvent:[] in TextMorphForEditView(TextMorph)>>keyStroke:ViToolSet class(ECToolSet class)>>codeCompletionAround:textMorph:keyStroke:ToolSet class>>codeCompletionAround:textMorph:keyStroke:TextMorphForEditView(TextMorph)>>keyStroke:TextMorphForEditView>>keyStroke:TextMorphForEditView(Morph)>>handleKeystroke:TextMorphForEditView(TextMorph)>>handleKeystroke:KeyboardEvent>>sentTo:TextMorphForEditView(Morph)>>handleEvent:TextMorphForEditView(Morph)>>handleFocusEvent:MorphicEventDispatcher>>doHandlingForFocusEvent:with:MorphicEventDispatcher>>dispatchFocusEvent:with:TextMorphForEditView(Morph)>>processFocusEvent:using:TextMorphForEditView(Morph)>>processFocusEvent:[] in [] in [] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:KeyboardEvent(MorphicEvent)>>becomeActiveDuring:[] in [] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:HandMorph>>becomeActiveDuring:[] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:PasteUpMorph>>becomeActiveDuring:HandMorph>>sendFocusEvent:to:clear:HandMorph>>sendEvent:focus:clear:HandMorph>>sendKeyboardEvent:HandMorph>>handleEvent:HandMorph>>processEvents[] in AnimWorldState(WorldState)>>doOneCycleNowFor:Array(SequenceableCollection)>>do:AnimWorldState(WorldState)>>handsDo:AnimWorldState(WorldState)>>doOneCycleNowFor:AnimWorldState(WorldState)>>doOneCycleFor:PasteUpMorph>>doOneCycle[] in AnimMorphicProject>>spawnNewProcess[] in BlockClosure>>newProcess